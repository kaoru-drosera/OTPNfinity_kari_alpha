<!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>効果音ポン出しwebアプリ・主機能のみテスト</title>
  <meta name="description" content="">
  <meta name="keywords" content="">
  <meta name="author" content="">
  <link rel="shortcut icon" href="/favicon.ico" type="image/vnd.microsoft.ico">
  <link rel="apple-touch-icon-precomposed" href="/favicon-152.png">

  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/instantsearch.js@2.8.1/dist/instantsearch.min.css">

  <!-- You can also add this theme to add a Bootstrap-like appearance to your widgets. -->
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/instantsearch.js@2.8.1/dist/instantsearch-theme-algolia.min.css">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/instantsearch.css@7.4.5/themes/satellite-min.css" integrity="sha256-TehzF/2QvNKhGQrrNpoOb2Ck4iGZ1J/DI4pkd2oUsBc=" crossorigin="anonymous">

</head>
<body>

  <!-- <div class="stltest">
    <p>longrangeshooting</p>
  </div> -->





  <script>

    console.log('hello,gulp.lol');

    // サンプラー名
    var samplerName = document.getElementById("sampler_name");

    // 上段
    var soundQ = new Audio();
    var soundW = new Audio();
    var soundE = new Audio();
    var soundR = new Audio();
    soundQ.src = "./sounds/ラッパのファンファーレ.mp3";
    soundW.src = "./sounds/ドンドンパフパフ.mp3";
    soundE.src = "./sounds/レベルアップ.mp3";
    soundR.src = "./sounds/歓声と拍手.mp3";
    var form_fileQ = document.getElementById("selectFile_q");
    var form_fileW = document.getElementById("selectFile_w");
    var form_fileE = document.getElementById("selectFile_e");
    var form_fileR = document.getElementById("selectFile_r");
    var volumeQ = document.getElementById("vol-q");
    var volumeW = document.getElementById("vol-w");
    var volumeE = document.getElementById("vol-e");
    var volumeR = document.getElementById("vol-r");
    var loopQ = document.getElementById("loopable_q");
    var loopW = document.getElementById("loopable_w");
    var loopE = document.getElementById("loopable_e");
    var loopR = document.getElementById("loopable_r");
    // var radioQ = document.getElementById("radio-field_q");
    // var radioW = document.getElementById("radio-field_w");
    // var radioE = document.getElementById("radio-field_e");
    var btnColorQ = document.getElementsByName("sampler[seboards_attributes][1][btncolor]");
    var btnColorW = document.getElementsByName("sampler[seboards_attributes][2][btncolor]");
    var btnColorE = document.getElementsByName("sampler[seboards_attributes][3][btncolor]");
    // var btnColorR = document.getElementByName("sampler[seboards_attributes][4][btncolor]");
    var bg_Q = document.getElementById("bg-q");
    var bg_W = document.getElementById("bg-w");
    var bg_E = document.getElementById("bg-e");
    // var bg_R = document.getElementById("bg-r");
    var senameQ = document.getElementById("senameQ");
    var senameW = document.getElementById("senameW");
    var senameE = document.getElementById("senameE");
    // var senameR = document.getElementById("senameR");
    var volumeValue_q;
    var volumeValue_w;
    var volumeValue_e;
    var volumeValue_r;
    var loopValue_q;
    var loopValue_w;
    var loopValue_e;
    var loopValue_r;
    console.log(volumeQ);
    console.log(volumeW);
    console.log(volumeE);
    console.log(volumeR);
    console.log(btnColorQ);
    console.log(btnColorW);
    console.log(bg_Q);
    console.log(bg_W);


    // 中段
    var soundA = new Audio();
    var soundS = new Audio();
    var soundD = new Audio();
    var soundF = new Audio();
    soundA.src = "./sounds/和太鼓でドン.mp3";
    soundS.src = "./sounds/和太鼓でドドン.mp3";
    soundD.src = "./sounds/ピコピコハンマー.mp3";
    soundF.src = "./sounds/チーン1.mp3";
    var form_fileA = document.getElementById("selectFile_a");
    var form_fileS = document.getElementById("selectFile_s");
    var form_fileD = document.getElementById("selectFile_d");
    var form_fileF = document.getElementById("selectFile_f");
    var volumeA = document.getElementById("vol-a");
    var volumeS = document.getElementById("vol-s");
    var volumeD = document.getElementById("vol-d");
    var volumeF = document.getElementById("vol-f");
    var loopA = document.getElementById("loopable_a");
    var loopS = document.getElementById("loopable_s");
    var loopD = document.getElementById("loopable_d");
    var loopF = document.getElementById("loopable_f");
    var volumeValue_a;
    var volumeValue_s;
    var volumeValue_d;
    var volumeValue_f;
    var loopValue_a;
    var loopValue_s;
    var loopValue_d;
    var loopValue_f;
    console.log(volumeA);
    console.log(volumeS);
    console.log(volumeD);
    console.log(volumeF);

    // 下段
    var soundZ = new Audio();
    var soundX = new Audio();
    var soundC = new Audio();
    var soundV = new Audio();
    soundZ.src = "./sounds/クイズ出題1.mp3";
    soundX.src = "./sounds/決定、ボタン押下22.mp3";
    soundC.src = "./sounds/クイズ不正解1.mp3";
    soundV.src = "./sounds/クイズ正解1.mp3";
    var volumeZ = document.getElementById("vol-z");
    var volumeX = document.getElementById("vol-x");
    var volumeC = document.getElementById("vol-c");
    var volumeV = document.getElementById("vol-v");
    var loopZ = document.getElementById("loopable_z");
    var loopX = document.getElementById("loopable_x");
    var loopC = document.getElementById("loopable_c");
    var loopV = document.getElementById("loopable_v");
    var form_fileZ = document.getElementById("selectFile_z");
    var form_fileX = document.getElementById("selectFile_x");
    var form_fileC = document.getElementById("selectFile_c");
    var form_fileV = document.getElementById("selectFile_v");
    var volumeValue_z;
    var volumeValue_x;
    var volumeValue_c;
    var volumeValue_v;
    var loopValue_z;
    var loopValue_x;
    var loopValue_c;
    var loopValue_v;
    console.log(volumeZ);
    console.log(volumeX);
    console.log(volumeC);
    console.log(volumeV);

    var sound = [soundQ, soundW, soundE, soundR, soundA, soundS, soundD, soundF, soundZ, soundX, soundC, soundV];
    // var reader = [readerQ, readerW, readerE, readerR, readerA, readerS, readerD, readerF, readerZ, readerX, readerC, readerV];
    // var reader = [readerD, readerF];

    // エラー抑制
    // https://qiita.com/krmbn0576/items/e9bc5384b790df9e39ab
    // var promise = Promise.reject(new Error('promise!!!'));
    // promise.catch(function(e){});
    // setTimeout(function(){promise.catch(/* 適切なエラーハンドル */)},1000);

    // 初期化？
    var init = sound.map(function(value){
        console.log(value);
        value.preload = "auto";
        value.load();
      }
    );


    function volumeInit(soundName, volume, volumeValue){
      // 音量調節
      volume.addEventListener('click', function () {
        volumeValue = (volume.value.length == 1) ? "0.0" + volume.value : "0." + volume.value ;
        soundName.volume = volumeValue;
      },false);
    }

    function loopInit(soundName, loop, loopValue){
      // ループ切り替え
      loop.addEventListener('change', function () {
        loopValue = (loop.checked == true) ? loop.loop = true : loop.loop = false;
        soundName.loop = loopValue;
      },false);
    }
    // console.log(soundD.loop);
    // console.log(loopValue_f);

    var playbtn = document.querySelectorAll('.playbtn');

    // キータッチでの再生
    document.body.addEventListener("keydown",
      event => {
        var whatIsKey = event.key;
        switch (whatIsKey) {

          // 上段
          case 'q':
            play(soundQ, loopQ, loopValue_q);
            console.log("q pressed");
            break;
          case 'w':
            play(soundW, loopW, loopValue_w);
            console.log("w pressed");
            break;
          case 'e':
            play(soundE, loopE, loopValue_e);
            console.log("e pressed");
            break;
          case 'r':
            play(soundR, loopR, loopValue_r);
            console.log("r pressed");
            break;

          // 中段
          case 'a':
            play(soundA,loopA,loopValue_a);
            console.log("a pressed");
            break;
          case 's':
            play(soundS,loopS,loopValue_s);
            console.log("s pressed");
            break;
          case 'd':
            // document.getElementById("caseBtn_d").onclick;
            play(soundD,loopD,loopValue_d);
            console.log("d pressed");
            break;
          case 'f':
            // document.getElementById("caseBtn_f").onclick;
            play(soundF,loopF,loopValue_f);
            console.log("f pressed");
            break;

            // 下段
            case 'z':
              play(soundZ, loopZ, loopValue_z);
              console.log("z pressed");
              break;
            case 'x':
              play(soundX, loopX, loopValue_x);
              console.log("x pressed");
              break;
            case 'c':
              play(soundC, loopC, loopValue_c);
              console.log("c pressed");
              break;
            case 'v':
              play(soundV, loopV, loopValue_v);
              console.log("v pressed");
              break;
        }
      }
    );


    function play(plaing,loop,loopValue){
      if(loop.loop == true){
        console.log("switchPlay mode");
        if(plaing.paused == false){
          plaing.pause();
          console.log("pausing");
        } else {
          plaing.currentTime = 0;
          plaing.play();
        };
      } else {
        console.log("normalPlay mode");
        plaing.currentTime = 0;
        plaing.play();
      };
      console.log(plaing.paused);
    };


    // 音声選択フォーム読み込み(プロトタイプ)
    function readFile(soundName,form){
      form.addEventListener('change',function(form){
        var reader = new FileReader();
        reader.onload = function(form){
          soundName.src = form.target.result;
        }
        reader.readAsDataURL(form.target.files[0]);

        console.log(soundName);
        console.log(form);
        console.log(reader);
      });
    };


    // volChangerQ.addEventListener('click',function(){
    //
    //   // 音量変更(Q)
    //   btnColorQ[0].checked = true;
    //   btnColorInit(btnColorQ, bg_Q);
    //   // bg_Q.style.backgroundColor = "#f88";
    //   //
    //   // volumeQ.value = 15;
    //   // soundQ.volume = 0.15;
    //   // soundQ.src = "./sounds/ビシッとツッコミ1.mp3";
    //   // form_fileQ.value = "";
    //   // bg_Q.style.backgroundColor = "#808";
    //
    //   // form_fileD.value = "./sounds/ビシッとツッコミ1.mp3";
    //   // ↑のように「フォームの値を変更」はセキュリティ上の理由で不可能。
    //   // その代わりとして「フォームの値をリセットしてsoundD.srcを直接変更」
    //   // …という方法で行うことにした。
    //
    // });


    // ボタン色
    function btnColorInit(btnColor, bg){
        console.log(btnColor);
        console.log(bg);
        for(var j=0; j<btnColor.length; j++){
          if(btnColor[j].checked){
            // console.log(i);
            console.log(btnColor);
            var a = btnColor[j].value;
            console.log(a);
            // break;

            switch (a) {
              case "1":
                bg.style.backgroundColor = "#f88";
                break;
              case "2":
                bg.style.backgroundColor = "#88f";
                break;
              case "3":
                bg.style.backgroundColor = "#fff";
                break;
            }
          }
        }
    }

  window.addEventListener('load',function(){

        var btnColors = [btnColorQ, btnColorW, btnColorE];
        var bgs = [bg_Q, bg_W, bg_E];

        // ↓ ここからの部分を関数化して、複数アクションで呼ぼう。
        var mapping_btbColors = btnColors.map(function(v){
          var mapping_bgs = bgs.map(function(z){

          console.log(v);
          console.log(z);
          btnColorInit(v, z);
          });
        });
        // ↑ ここまでの部分を関数化して、複数アクションで呼ぼう。

  });

  var btnColors = [btnColorQ, btnColorW, btnColorE];
  var bgs = [bg_Q, bg_W, bg_E];

  var mapping_btbColors = btnColors.map(function(v){
    var mapping_bgs = bgs.map(function(z){

      for(var vi=0; vi<v.length; vi++){
        for(var zi=0; zi<z.length; zi++){
          v[vi].addEventListener('click',function(){
            // console.log(v[vi]);
            // console.log(z[zi]);
            btnColorInit(v[vi], z[zi]);
          });
        }
      }

    });
  });










    init;


    // 無限スクロール実装
    $(window).on('scroll', function() {
      scrollHeight = $(document).height();
      scrollPosition = $(window).height() + $(window).scrollTop();
      if ( (scrollHeight - scrollPosition) / scrollHeight <= 0.15) {
        $('.jscroll').jscroll({
          contentSelector: '.scroll-list',
          nextSelector: 'span.next:last a'
        });
      }
    });





    // リアルタイム検索実装

  </script>
  <script src="https://cdn.jsdelivr.net/npm/algoliasearch@4.5.1/dist/algoliasearch-lite.umd.js" integrity="sha256-EXPXz4W6pQgfYY3yTpnDa3OH8/EPn16ciVsPQ/ypsjk=" crossorigin="anonymous"></script>
  <script src="https://cdn.jsdelivr.net/npm/instantsearch.js@4.8.3/dist/instantsearch.production.min.js" integrity="sha256-LAGhRRdtVoD6RLo2qDQsU2mp+XVSciKRC8XPOBWmofM=" crossorigin="anonymous"></script>
  <%# javascript_pack_tag 'app' %>
</body>
</html>
